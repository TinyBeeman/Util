Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     statement -> FOREACH LPAREN foreachargs RPAREN
Rule 3     foreachargs -> expression
Rule 4     foreachargs -> expression COMMA NUMBER
Rule 5     foreachargs -> expression COMMA NUMBER COMMA NUMBER
Rule 6     expression -> ID
Rule 7     expression -> ID LPAREN arglist RPAREN
Rule 8     arglist -> expression COMMA arglist
Rule 9     arglist -> expression
Rule 10    expression -> array
Rule 11    array -> LBRACKET arglist RBRACKET
Rule 12    array -> LIST LPAREN expression RPAREN
Rule 13    expression -> constant
Rule 14    constant -> STRING
Rule 15    constant -> MINUS NUMBER
Rule 16    constant -> NUMBER

Terminals, with rules where they appear

COMMA                : 4 5 5 8
FOREACH              : 2
ID                   : 6 7
LBRACKET             : 11
LIST                 : 12
LPAREN               : 2 7 12
MINUS                : 15
NUMBER               : 4 5 5 15 16
RBRACKET             : 11
RPAREN               : 2 7 12
STRING               : 14
error                : 

Nonterminals, with rules where they appear

arglist              : 7 8 11
array                : 10
constant             : 13
expression           : 1 3 4 5 8 9 12
foreachargs          : 2
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) statement -> . FOREACH LPAREN foreachargs RPAREN
    (6) expression -> . ID
    (7) expression -> . ID LPAREN arglist RPAREN
    (10) expression -> . array
    (13) expression -> . constant
    (11) array -> . LBRACKET arglist RBRACKET
    (12) array -> . LIST LPAREN expression RPAREN
    (14) constant -> . STRING
    (15) constant -> . MINUS NUMBER
    (16) constant -> . NUMBER

    FOREACH         shift and go to state 3
    ID              shift and go to state 4
    LBRACKET        shift and go to state 7
    LIST            shift and go to state 8
    STRING          shift and go to state 9
    MINUS           shift and go to state 10
    NUMBER          shift and go to state 11

    statement                      shift and go to state 1
    expression                     shift and go to state 2
    array                          shift and go to state 5
    constant                       shift and go to state 6

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .

    $end            reduce using rule 1 (statement -> expression .)


state 3

    (2) statement -> FOREACH . LPAREN foreachargs RPAREN

    LPAREN          shift and go to state 12


state 4

    (6) expression -> ID .
    (7) expression -> ID . LPAREN arglist RPAREN

    $end            reduce using rule 6 (expression -> ID .)
    COMMA           reduce using rule 6 (expression -> ID .)
    RBRACKET        reduce using rule 6 (expression -> ID .)
    RPAREN          reduce using rule 6 (expression -> ID .)
    LPAREN          shift and go to state 13


state 5

    (10) expression -> array .

    $end            reduce using rule 10 (expression -> array .)
    COMMA           reduce using rule 10 (expression -> array .)
    RBRACKET        reduce using rule 10 (expression -> array .)
    RPAREN          reduce using rule 10 (expression -> array .)


state 6

    (13) expression -> constant .

    $end            reduce using rule 13 (expression -> constant .)
    COMMA           reduce using rule 13 (expression -> constant .)
    RBRACKET        reduce using rule 13 (expression -> constant .)
    RPAREN          reduce using rule 13 (expression -> constant .)


state 7

    (11) array -> LBRACKET . arglist RBRACKET
    (8) arglist -> . expression COMMA arglist
    (9) arglist -> . expression
    (6) expression -> . ID
    (7) expression -> . ID LPAREN arglist RPAREN
    (10) expression -> . array
    (13) expression -> . constant
    (11) array -> . LBRACKET arglist RBRACKET
    (12) array -> . LIST LPAREN expression RPAREN
    (14) constant -> . STRING
    (15) constant -> . MINUS NUMBER
    (16) constant -> . NUMBER

    ID              shift and go to state 4
    LBRACKET        shift and go to state 7
    LIST            shift and go to state 8
    STRING          shift and go to state 9
    MINUS           shift and go to state 10
    NUMBER          shift and go to state 11

    arglist                        shift and go to state 14
    expression                     shift and go to state 15
    array                          shift and go to state 5
    constant                       shift and go to state 6

state 8

    (12) array -> LIST . LPAREN expression RPAREN

    LPAREN          shift and go to state 16


state 9

    (14) constant -> STRING .

    $end            reduce using rule 14 (constant -> STRING .)
    COMMA           reduce using rule 14 (constant -> STRING .)
    RBRACKET        reduce using rule 14 (constant -> STRING .)
    RPAREN          reduce using rule 14 (constant -> STRING .)


state 10

    (15) constant -> MINUS . NUMBER

    NUMBER          shift and go to state 17


state 11

    (16) constant -> NUMBER .

    $end            reduce using rule 16 (constant -> NUMBER .)
    COMMA           reduce using rule 16 (constant -> NUMBER .)
    RBRACKET        reduce using rule 16 (constant -> NUMBER .)
    RPAREN          reduce using rule 16 (constant -> NUMBER .)


state 12

    (2) statement -> FOREACH LPAREN . foreachargs RPAREN
    (3) foreachargs -> . expression
    (4) foreachargs -> . expression COMMA NUMBER
    (5) foreachargs -> . expression COMMA NUMBER COMMA NUMBER
    (6) expression -> . ID
    (7) expression -> . ID LPAREN arglist RPAREN
    (10) expression -> . array
    (13) expression -> . constant
    (11) array -> . LBRACKET arglist RBRACKET
    (12) array -> . LIST LPAREN expression RPAREN
    (14) constant -> . STRING
    (15) constant -> . MINUS NUMBER
    (16) constant -> . NUMBER

    ID              shift and go to state 4
    LBRACKET        shift and go to state 7
    LIST            shift and go to state 8
    STRING          shift and go to state 9
    MINUS           shift and go to state 10
    NUMBER          shift and go to state 11

    foreachargs                    shift and go to state 18
    expression                     shift and go to state 19
    array                          shift and go to state 5
    constant                       shift and go to state 6

state 13

    (7) expression -> ID LPAREN . arglist RPAREN
    (8) arglist -> . expression COMMA arglist
    (9) arglist -> . expression
    (6) expression -> . ID
    (7) expression -> . ID LPAREN arglist RPAREN
    (10) expression -> . array
    (13) expression -> . constant
    (11) array -> . LBRACKET arglist RBRACKET
    (12) array -> . LIST LPAREN expression RPAREN
    (14) constant -> . STRING
    (15) constant -> . MINUS NUMBER
    (16) constant -> . NUMBER

    ID              shift and go to state 4
    LBRACKET        shift and go to state 7
    LIST            shift and go to state 8
    STRING          shift and go to state 9
    MINUS           shift and go to state 10
    NUMBER          shift and go to state 11

    arglist                        shift and go to state 20
    expression                     shift and go to state 15
    array                          shift and go to state 5
    constant                       shift and go to state 6

state 14

    (11) array -> LBRACKET arglist . RBRACKET

    RBRACKET        shift and go to state 21


state 15

    (8) arglist -> expression . COMMA arglist
    (9) arglist -> expression .

    COMMA           shift and go to state 22
    RBRACKET        reduce using rule 9 (arglist -> expression .)
    RPAREN          reduce using rule 9 (arglist -> expression .)


state 16

    (12) array -> LIST LPAREN . expression RPAREN
    (6) expression -> . ID
    (7) expression -> . ID LPAREN arglist RPAREN
    (10) expression -> . array
    (13) expression -> . constant
    (11) array -> . LBRACKET arglist RBRACKET
    (12) array -> . LIST LPAREN expression RPAREN
    (14) constant -> . STRING
    (15) constant -> . MINUS NUMBER
    (16) constant -> . NUMBER

    ID              shift and go to state 4
    LBRACKET        shift and go to state 7
    LIST            shift and go to state 8
    STRING          shift and go to state 9
    MINUS           shift and go to state 10
    NUMBER          shift and go to state 11

    expression                     shift and go to state 23
    array                          shift and go to state 5
    constant                       shift and go to state 6

state 17

    (15) constant -> MINUS NUMBER .

    $end            reduce using rule 15 (constant -> MINUS NUMBER .)
    COMMA           reduce using rule 15 (constant -> MINUS NUMBER .)
    RBRACKET        reduce using rule 15 (constant -> MINUS NUMBER .)
    RPAREN          reduce using rule 15 (constant -> MINUS NUMBER .)


state 18

    (2) statement -> FOREACH LPAREN foreachargs . RPAREN

    RPAREN          shift and go to state 24


state 19

    (3) foreachargs -> expression .
    (4) foreachargs -> expression . COMMA NUMBER
    (5) foreachargs -> expression . COMMA NUMBER COMMA NUMBER

    RPAREN          reduce using rule 3 (foreachargs -> expression .)
    COMMA           shift and go to state 25


state 20

    (7) expression -> ID LPAREN arglist . RPAREN

    RPAREN          shift and go to state 26


state 21

    (11) array -> LBRACKET arglist RBRACKET .

    $end            reduce using rule 11 (array -> LBRACKET arglist RBRACKET .)
    COMMA           reduce using rule 11 (array -> LBRACKET arglist RBRACKET .)
    RBRACKET        reduce using rule 11 (array -> LBRACKET arglist RBRACKET .)
    RPAREN          reduce using rule 11 (array -> LBRACKET arglist RBRACKET .)


state 22

    (8) arglist -> expression COMMA . arglist
    (8) arglist -> . expression COMMA arglist
    (9) arglist -> . expression
    (6) expression -> . ID
    (7) expression -> . ID LPAREN arglist RPAREN
    (10) expression -> . array
    (13) expression -> . constant
    (11) array -> . LBRACKET arglist RBRACKET
    (12) array -> . LIST LPAREN expression RPAREN
    (14) constant -> . STRING
    (15) constant -> . MINUS NUMBER
    (16) constant -> . NUMBER

    ID              shift and go to state 4
    LBRACKET        shift and go to state 7
    LIST            shift and go to state 8
    STRING          shift and go to state 9
    MINUS           shift and go to state 10
    NUMBER          shift and go to state 11

    expression                     shift and go to state 15
    arglist                        shift and go to state 27
    array                          shift and go to state 5
    constant                       shift and go to state 6

state 23

    (12) array -> LIST LPAREN expression . RPAREN

    RPAREN          shift and go to state 28


state 24

    (2) statement -> FOREACH LPAREN foreachargs RPAREN .

    $end            reduce using rule 2 (statement -> FOREACH LPAREN foreachargs RPAREN .)


state 25

    (4) foreachargs -> expression COMMA . NUMBER
    (5) foreachargs -> expression COMMA . NUMBER COMMA NUMBER

    NUMBER          shift and go to state 29


state 26

    (7) expression -> ID LPAREN arglist RPAREN .

    $end            reduce using rule 7 (expression -> ID LPAREN arglist RPAREN .)
    COMMA           reduce using rule 7 (expression -> ID LPAREN arglist RPAREN .)
    RBRACKET        reduce using rule 7 (expression -> ID LPAREN arglist RPAREN .)
    RPAREN          reduce using rule 7 (expression -> ID LPAREN arglist RPAREN .)


state 27

    (8) arglist -> expression COMMA arglist .

    RBRACKET        reduce using rule 8 (arglist -> expression COMMA arglist .)
    RPAREN          reduce using rule 8 (arglist -> expression COMMA arglist .)


state 28

    (12) array -> LIST LPAREN expression RPAREN .

    $end            reduce using rule 12 (array -> LIST LPAREN expression RPAREN .)
    COMMA           reduce using rule 12 (array -> LIST LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 12 (array -> LIST LPAREN expression RPAREN .)
    RPAREN          reduce using rule 12 (array -> LIST LPAREN expression RPAREN .)


state 29

    (4) foreachargs -> expression COMMA NUMBER .
    (5) foreachargs -> expression COMMA NUMBER . COMMA NUMBER

    RPAREN          reduce using rule 4 (foreachargs -> expression COMMA NUMBER .)
    COMMA           shift and go to state 30


state 30

    (5) foreachargs -> expression COMMA NUMBER COMMA . NUMBER

    NUMBER          shift and go to state 31


state 31

    (5) foreachargs -> expression COMMA NUMBER COMMA NUMBER .

    RPAREN          reduce using rule 5 (foreachargs -> expression COMMA NUMBER COMMA NUMBER .)

